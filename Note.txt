==============================================Etape Une, composants dynamique! Fait==============================================
//Faire deux composants nommé <step1 /> <step2 /> les stocker dans un tableau [<step1 />, <step2 />](y)

//Faire un currentstate et un setState qui prendra l'index des step dans le tableau. Au démarrage currentState vaudra 0 const state = [currentState, setState] = useState(0);(y)

//Faire deux boutons <input précédent /> <input suivant /> (y)
//Au click de suivant incrémenter le state de 1 (y)
//Au click de précédent décrémenter le state de 1(y)

//Si le currentState vaut 0 impossible de décrémenter(y)
//Si le currentState vaut plus que la longueur du tableau impossible d'incrémenter(y)

==================================================Etape Deux, les couleurs ! ==================================================
//Faire une config qui contient le thème des couleurs (actuellement rouge, bleu, vert), probablement un tableau qui contient un objet (y)

//Afficher autant de boutton de couleurs que la config propose via un map (y)

//Sur le click enregistrer la couleur choisie par l'utilisateur dans un state pour garder l'information et la manipuler après! (y)

//Refracto quelques bouts de code dans l'étape (je pense)

//Faire une condition pour vérifier la valeur de l'élément target avec la config qui contient les couleurs pour ensuite récupérer la couleur en hexadécimal (je n'apprécie pas la façon dont je récupère la valeur)

===========================================Etape Trois, les checkbox !===========================================
//Créer un tableau qui comprend les texte dans l'exemple de Valérian (y);
//Si la checkbox est checked, on set le state en ajoutant la valeur de la checkbox, setState(valueCheckbox) (y);
//si la checkbox est unchecked setState en retirant la valeur de la checkbox (y);

==========================================Etape Quatre, les models vectary !====================================
//Dans un premier temps, afficher autant de model qu'il y'a des éléments dans la config models = [{}] (y);
//Dans un second temps il faudra afficher les modèles vectary en fonction des checkbox sélectionnée
//Dans un premier temps, Sauvegarder la couleur sélectionnée dans couleur dominantes et update le matériel avec la couleur souhaitée(y);

==========================================Etape Cinq, nom de commune sur manchon !================================
//Ecrire le nom de la commune noté par l'utilisateur et l'afficher sur le manchon. Pour se faire, utiliser Annotations de l'api vectary (voir pour une meilleur solution, probablement mettre un forma image qui s'affichera sur le manchon);

==========================Etape Six, appliquer les changement quand on prend une photo Ar ! ===============================
//Utiliser Ar badge de l'Api vectary (quelques complications pour la manipulation)
//Check si il n'y a pas des pistes sur le modèle avec le casque (N);

=========================Etape Sept, selon la sélection checkbox afficher les panneaux adequat !============================
//Faire un tableau qui contient un objet au lieu d'un tableau sur const signals = [] dans config.js
//const obj = [{name: "", value:"", id:"", label:"", target: "", checked: "checkboxesState"}]